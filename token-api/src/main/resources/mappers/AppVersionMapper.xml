<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    id：在命名空间中唯一的标识符，可以被用来引用这条语句。
    parameterType：将会传入这条语句的参数类的完全限定名或别名。这个属性是可选的，因为MyBatis可以通过TypeHandler推断出具体传入语句的参数，默认值为unset。

    下面两个一般配置resultMap
    resultType：从这条语句中返回的期望类型的类的完全限定名或别名。注意如果是集合情形，那应该是集合可以包含的类型，而不能是集合本身。返回时可以使用resultType或resultMap，但不能同时使用。
    resultMap：外部resultMap的引用。结果集的映射是MyBatis最强大的特性，对其有一个很好的理解的话，许多复杂映射的情形都能迎刃而解。返回时可以使用resultMap或resultType，但不能同时使用。

    下面的一般不会配置
    flushCache：如果设置为true，则任何时候只要语句被调用，都会导致本地缓存和二级缓存都被清空，默认值为false。
    useCache：如果设置为true，将会导致本条语句的结果被二级缓存，在select元素当中默认值为true。
    timeout：这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的描述。默认值为unset（依赖驱动）。
    fetchSize：这是尝试影响驱动程序每次批量返回的结果行数和这个设置值相等。默认值为unset（依赖驱动）。
    statementType：值为STATEMENT、PREPARED或CALLABLE。这会让MyBatis分别使用JDBC中的Statement、PreparedStatement或CallableStatement，默认值为PREPARED。
    resultSetType：结果集的类型，值为FORWARD_ONLY、SCROLL_SENSITIVE或SCROLL_INSENSITIVE，默认值为unset（依赖驱动）。
    databaseId：如果配置了databaseIdProvider，MyBatis会加载所有的不带databaseId或匹配当前databaseId的语句；如果带或者不带的语句都有，则不带的会被忽略。
    resultOrdered：这个设置仅针对嵌套结果select语句适用。如果为true，就是假设包含了嵌套结果集或是分组了，这样的话当返回一个主结果行的时候，就不会发生对前面结果集引用的情况。这就使得在获取嵌套的结果集时不至于导致内存不够用。默认值为false。
    resultSets：这个设置仅对多结果集的情况适用，它将列出语句执行后返回的结果集并给每个结果集一个名称，名称是逗号分隔的。
 -->
<mapper namespace="com.sharex.token.api.mapper.AppVersionMapper">
    <!--
        id：resultMap的唯一标识符。
        type：resultMap实际返回的类型。
    -->
    <resultMap id="appVersionMap" type="com.sharex.token.api.entity.AppVersion">
        <!--
            id：表示数据库的主键，其中，column属性表示数据库表的列名，property表示数据库列映射到返回类型的属性。
            result：表示数据库的普通列，其中，column属性表示数据库表的列名，property表示数据库列映射到返回类型的属性。
        -->
        <result column="id" property="id" />
        <result column="platform_name" property="platformName" />
        <result column="version" property="version" />
        <result column="version_code" property="versionCode" />
        <result column="status" property="status" />
        <result column="download_url" property="downloadUrl" />
        <result column="create_time" property="createTime" />
        <result column="update_time" property="updateTime" />
    </resultMap>

    <!--
        useGeneratedKeys：（仅对insert和update有用）这会令MyBatis使用JDBC的getGeneratedKeys方法来获取由数据库内部生成的主键（比如，像MySql和SQL Server这样的关系数据库管理系统的自动递增字段），默认值为false。
        keyProperty：（仅对insert和update游泳）唯一标记一个属性，MyBatis会通过getGeneratedKeys的返回值或者通过insert语句的selectKey子元素设置它的键值，默认为unset。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。
        keyColumn：（仅对insert和update有用）通过生成的键值设置表中的列名，这个设置仅对某些数据库（像PostgreSQL）是必须的，当主键列不是表中的第一列时需要设置。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。
    -->
    <select id="selectList" resultMap="appVersionMap">
        SELECT `id`, `platform_name`, `version`, `version_code`, `status`, `download_url`, `create_time`, `update_time`
        FROM `app_version`
        WHERE `status` = 0;
    </select>
</mapper>